##Python实现PCA
import numpy as np



def pca(X,k):#k is the components you want
  #mean of each feature
  n_samples, n_features = X.shape
  mean=np.array([np.mean(X[:,i]) for i in range(n_features)])
  #normalization
  norm_X=X-mean
  #scatter matrix
  scatter_matrix=np.dot(np.transpose(norm_X),norm_X)
  #Calculate the eigenvectors and eigenvalues
  eig_val, eig_vec = np.linalg.eig(scatter_matrix)
  eig_pairs = [(np.abs(eig_val[i]), eig_vec[:,i]) for i in range(n_features)]
  # sort eig_vec based on eig_val from highest to lowest
  eig_pairs.sort(reverse=True)
  # select the top k eig_vec
  feature=np.array([ele[1] for ele in eig_pairs[:k]])
  #get new data
  data=np.dot(norm_X,np.transpose(feature))
  return data

X = np.array([[-1, 1,2 ,21], [-2, -1,2,4], [-3, -2,3,8], [1, 1,7,9], [2, 1,-4,-12], [3, 2,0,1]])

print(pca(X,2))


##用sklearn的PCA
from sklearn.decomposition import PCA
import numpy as np
X = np.array([[-1, 1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])
pca=PCA(n_components=1)
pca.fit(X)
print(pca.transform(X))
explained_var = pca.explained_variance_ratio_  # 获取贡献率
print("各个主成分的贡献率为:"+str(explained_var))

# 首先，“原始数据各个变量单位不统一”， 我们并不一定非要将每个变量改成统一变量单位。 只要每个变量中所有数据都用同一个单位，数据
# 本身没有问题。主成分分析可以处理单位不同的数据。接下来，如果因为单位的不同，或
# 者变量数据本身分布不均，数据预处理是必须的。比如说变量a的分布是0-100， 变量b的分布是0-0.01， 这
# 对于主成分分析是有可能有影响。是否需要数据进行变化的衡量标准，比较主流的看法是：

from sklearn.decomposition import PCA
import numpy as np

X = np.random.random((10000, 90))  # 数据
print(X.shape)
pca = PCA(n_components=3, whiten=True, random_state=42)  # 降维至3个特征
newX = pca.fit_transform(X)
print(newX.shape)
explained_var = pca.explained_variance_ratio_  # 获取贡献率
print(explained_var)
